services:
  # ==================== EXTERNAL SERVICES ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - quantis-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: citusdata/citus:12.1
    environment:
      POSTGRES_USER: quantis
      POSTGRES_PASSWORD: quantis
      POSTGRES_DB: quantisdb
      # Enable Citus extension
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../infra/sql/citus-setup.sql:/docker-entrypoint-initdb.d/citus-setup.sql
    networks:
      - quantis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantis -d quantisdb"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quantis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  cassandra:
    image: cassandra:4.1
    environment:
      CASSANDRA_CLUSTER_NAME: QuantisCluster
      CASSANDRA_START_RPC: "true"
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - quantis-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - quantis-network

  # ==================== APPLICATION SERVICES ====================
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=$JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  market-data-service:
    build:
      context: ../services/market-data-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
      - "9091:9091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - EXCHANGE_RATE_API_KEY=${EXCHANGE_RATE_API_KEY}
      - POLYGON_API_KEY=${POLYGON_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  order-ingress:
    build:
      context: ../services/order-ingress
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  portfolio-service:
    build:
      context: ../services/portfolio-service
      dockerfile: Dockerfile
    ports:
      - "8083:8082"
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8082/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  risk-service:
    build:
      context: ../services/risk-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  trading-engine:
    build:
      context: ../services/trading-engine
      dockerfile: Dockerfile
    ports:
      - "8084:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8083/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  update-service:
    build:
      context: ../services/update-service
      dockerfile: Dockerfile
    ports:
      - "8085:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8084/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  dashboard-gateway:
    build:
      context: ../services/dashboard-gateway
      dockerfile: Dockerfile
    ports:
      - "8086:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=postgresql://quantis:quantis@postgres:5432/quantisdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
      - market-data-service
      - order-ingress
      - portfolio-service
      - risk-service
      - trading-engine
      - update-service
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8085/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cassandra-writer-service:
    build:
      context: ../services/cassandra-writer-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=quantis_trading
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8087/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  trader-dashboard:
    build:
      context: ../services/trader-dashboard
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8086
      - REACT_APP_WS_URL=ws://localhost:8082
    depends_on:
      - dashboard-gateway
    networks:
      - quantis-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  cassandra_data:
    driver: local
  esdata:
    driver: local

networks:
  quantis-network:
    driver: bridge
