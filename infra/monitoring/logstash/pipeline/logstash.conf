input {
  # ==================== FILE INPUTS ====================
  file {
    path => "/var/log/quantis/*.log"
    start_position => "beginning"
    codec => "json"
    type => "application_logs"
  }
  
  # ==================== KAFKA INPUT ====================
  kafka {
    bootstrap_servers => "host.docker.internal:9092"
    topics => ["orders", "trades.out", "market.data"]
    codec => "json"
    type => "kafka_logs"
  }
  
  # ==================== TCP INPUT FOR STRUCTURED LOGS ====================
  tcp {
    port => 5044
    codec => "json_lines"
    type => "structured_logs"
  }
}

filter {
  # ==================== APPLICATION LOGS ====================
  if [type] == "application_logs" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:level} %{DATA:logger} - %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
    }
    
    mutate {
      add_field => { "service" => "%{[logger]}" }
      remove_field => [ "host", "path" ]
    }
  }
  
  # ==================== KAFKA LOGS ====================
  if [type] == "kafka_logs" {
    mutate {
      add_field => { "source" => "kafka" }
      add_field => { "topic" => "%{[@metadata][kafka][topic]}" }
    }
  }
  
  # ==================== TRADING SPECIFIC FILTERS ====================
  if [topic] == "orders" {
    mutate {
      add_field => { "event_type" => "order" }
    }
  }
  
  if [topic] == "trades.out" {
    mutate {
      add_field => { "event_type" => "trade" }
    }
  }
  
  if [topic] == "market.data" {
    mutate {
      add_field => { "event_type" => "market_data" }
    }
  }
  
  # ==================== ERROR DETECTION ====================
  if [level] == "ERROR" {
    mutate {
      add_field => { "alert_level" => "high" }
    }
  }
  
  if [level] == "WARN" {
    mutate {
      add_field => { "alert_level" => "medium" }
    }
  }
  
  # ==================== PERFORMANCE METRICS ====================
  if [message] =~ /latency|duration|time/ {
    grok {
      match => { "message" => ".*latency[:\s]+%{NUMBER:latency_ms:float}.*" }
    }
  }
}

output {
  # ==================== ELASTICSEARCH ====================
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "quantis-logs-%{+YYYY.MM.dd}"
    template_name => "quantis-logs"
    template => "/usr/share/logstash/templates/quantis-logs.json"
    template_overwrite => true
  }
  
  # ==================== CONSOLE OUTPUT (DEBUG) ====================
  stdout {
    codec => "rubydebug"
  }
}
