# ==================== APPLICATION TEMPLATE ====================
# Template for Spring Boot application configuration
# Copy this file to application.yml and customize for your service
# Remove or comment out sections you don't need

# ==================== SERVER CONFIGURATION ====================
server:
  port: 8080                    # HTTP port (change for each service)
  servlet:
    context-path: /             # Base path for all endpoints
  compression:
    enabled: true               # Enable response compression
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: always     # Include error messages in responses
    include-binding-errors: always

# ==================== SPRING APPLICATION CONFIGURATION ====================
spring:
  # Application metadata
  application:
    name: service-name          # Change this to your service name
  
  # ==================== PROFILES ====================
  profiles:
    active: dev                 # Active profile (dev, test, prod)
  
  # ==================== KAFKA CONFIGURATION ====================
  kafka:
    # Kafka cluster connection
    bootstrap-servers: localhost:9092
    
    # Producer configuration (for sending messages to Kafka)
    producer:
      # Serializers define how Java objects are converted to bytes for Kafka
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      
      # Reliability settings
      retries: 3                # Number of times to retry sending a message if it fails
      acks: all                 # Wait for acknowledgment from all replicas
      batch-size: 16384        # Batch size in bytes
      linger-ms: 1             # Time to wait before sending batch
      buffer-memory: 33554432  # Buffer memory in bytes
      
      # Idempotence (prevents duplicate messages)
      enable-idempotence: true
      
      # Compression
      compression-type: snappy
    
    # Consumer configuration (for reading messages from Kafka)
    consumer:
      # Serializers for reading messages
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      
      # Consumer group
      group-id: ${spring.application.name}-consumer
      
      # Offset management
      auto-offset-reset: earliest  # earliest, latest, none
      enable-auto-commit: true
      auto-commit-interval: 1000  # milliseconds
      
      # Polling configuration
      max-poll-records: 500
      max-poll-interval-ms: 300000  # 5 minutes
      
      # Session timeout
      session-timeout-ms: 30000  # 30 seconds
      heartbeat-interval-ms: 3000  # 3 seconds

  # ==================== DATABASE CONFIGURATION ====================
  # PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/quantisdb
    username: quantis
    password: quantis
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # JPA/Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: validate         # validate, create, create-drop, update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          fetch_size: 20

  # ==================== REDIS CONFIGURATION ====================
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

  # ==================== ELASTICSEARCH CONFIGURATION ====================
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 1s
    socket-timeout: 30s

  # ==================== CASSANDRA CONFIGURATION ====================
  data:
    cassandra:
      contact-points: localhost
      port: 9042
      keyspace-name: quantis
      local-datacenter: datacenter1
      schema-action: validate
      request-timeout: 10s
      connect-timeout: 10s

# ==================== MANAGEMENT ENDPOINTS ====================
# Spring Boot Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# ==================== LOGGING CONFIGURATION ====================
logging:
  level:
    root: INFO
    com.quantis: DEBUG          # Your application package
    org.springframework.kafka: INFO
    org.apache.kafka: INFO
    org.hibernate.SQL: DEBUG    # SQL queries (remove in production)
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # SQL parameters
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/${spring.application.name}.log
    max-size: 10MB
    max-history: 30

# ==================== SECURITY CONFIGURATION ====================
# JWT Configuration
jwt:
  secret: your-jwt-secret-key-here-change-in-production
  expiration: 86400000  # 24 hours in milliseconds

# ==================== TRADING PLATFORM SPECIFIC ====================
# Trading platform configuration
trading:
  # Order processing
  order:
    max-quantity: 1000000
    min-quantity: 1
    max-price: 1000000.0
    min-price: 0.01
    allowed-symbols: ["AAPL", "GOOGL", "MSFT", "TSLA", "AMZN", "META", "NVDA", "NFLX"]
  
  # Risk management
  risk:
    max-order-value: 1000000.0
    max-daily-volume: 10000000.0
    position-limits:
      enabled: true
      max-position-size: 100000
  
  # Market data
  market-data:
    refresh-interval: 1000  # milliseconds
    cache-ttl: 5000        # milliseconds

# ==================== CACHE CONFIGURATION ====================
# Caffeine cache configuration
caffeine:
  cache:
    default:
      maximum-size: 1000
      expire-after-write: 5m
    orders:
      maximum-size: 10000
      expire-after-write: 1h
    market-data:
      maximum-size: 1000
      expire-after-write: 1s

# ==================== SCHEDULING ====================
# Task scheduling configuration
scheduling:
  pool-size: 5
  thread-name-prefix: scheduled-task-

# ==================== MONITORING ====================
# Micrometer configuration for metrics
management:
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

# ==================== ENVIRONMENT SPECIFIC OVERRIDES ====================
# These can be overridden by environment variables or command line arguments
# Example: --server.port=8081 or SPRING_PROFILES_ACTIVE=prod

---
# ==================== DEVELOPMENT PROFILE ====================
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
logging:
  level:
    com.quantis: DEBUG
    org.springframework: DEBUG

---
# ==================== PRODUCTION PROFILE ====================
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate
logging:
  level:
    com.quantis: INFO
    org.springframework: WARN
    root: WARN
